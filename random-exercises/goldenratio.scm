(define (square x)
  (* x x))
(define (abs x)
  (if (> 0 x)
    (- x)
    x))
(define (improve guess x)
  (average guess (/ x guess)))
(define (average x y)
  (/ (+ x y) 2))
(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
    guess
    (sqrt-iter (improve guess x) x)))
(define (old-sqrt x)
  (sqrt-iter 1.0 x))

    ; My modified sqrt-iter and good-enough?
(define (better-sqrt-iter guess x prev-guess)
  (if (better-good-enough? guess prev-guess)
        guess
        (better-sqrt-iter (improve guess x) x guess)))
(define (better-good-enough? guess prev-guess)
  (< (abs (- prev-guess guess)) 0.001))
(define (sqrt x)
  (better-sqrt-iter 1.0 x 0))

(define gr (/ (+ 1 (sqrt 5)) 2))
